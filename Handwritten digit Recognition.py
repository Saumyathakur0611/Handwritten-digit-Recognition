# -*- coding: utf-8 -*-
"""trials.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zy0LHlnWyqbk4gnMfAjcg2A9yXWdUt8C
"""

pip install tensorflow

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()

len(X_train)

len(X_test)

X_train[0].shape

X_train[0]

plt.matshow(X_train[0])

plt.matshow(X_train[1])

y_train[1]

y_train[:5]

X_train.shape

X_train_flattened = X_train.reshape(len(X_train), 28*28)
X_test_flattened = X_test.reshape(len(X_test), 28*28)
print(X_train_flattened)

X_train_flattened.shape

X_test_flattened.shape

X_train_flattened[0]

model = keras.Sequential([
                  keras.layers.Dense(10, input_shape = (784,), activation = 'sigmoid')
])
model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
model.fit(X_train_flattened, y_train, epochs = 5)

model.evaluate(X_test_flattened, y_test)

model.predict(X_test_flattened)

plt.matshow(X_test[0])

y_predict = model.predict(X_test_flattened)
print(y_predict[0])
np.argmax(y_predict[0])

plt.matshow(X_test[2])

print(y_predict[2])
np.argmax(y_predict[2])

plt.matshow(X_test[8])

print(y_predict[8])
np.argmax(y_predict[8])

plt.matshow(X_test[1])

print(y_predict[1])
np.argmax(y_predict[1])

y_test[:10]

y_predict_labels = [np.argmax(i) for i in y_predict]
y_predict_labels[:10]

cn = tf.math.confusion_matrix(labels = y_test, predictions = y_predict_labels)
cn

import seaborn as sn
plt.figure(figsize = (10, 7))
sn.heatmap(cn, annot = True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Actual values')

model = keras.Sequential([
                  keras.layers.Dense(100, input_shape = (784,), activation = 'relu'),
                  keras.layers.Dense(10, activation = 'sigmoid')
])
model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
model.fit(X_train_flattened, y_train, epochs = 5)

model.evaluate(X_test_flattened, y_test)

import seaborn as sn
plt.figure(figsize = (10, 7))
sn.heatmap(cn, annot = True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Actual values')

model = keras.Sequential([
                  keras.layers.Flatten(input_shape = (28, 28)),        
                  keras.layers.Dense(100, activation = 'relu'),
                  keras.layers.Dense(10, activation = 'sigmoid')
])
model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
model.fit(X_train, y_train, epochs = 5)

import seaborn as sn
plt.figure(figsize = (10, 7))
sn.heatmap(cn, annot = True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Actual values')

y_predict_labels = [np.argmax(i) for i in y_predict]
y_predict_labels[:10]